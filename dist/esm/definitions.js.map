{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAAA,wCAAwC","sourcesContent":["/// <reference types=\"@capacitor/cli\" />\r\n\r\nimport type { PermissionState, PluginListenerHandle } from '@capacitor/core';\r\n\r\nexport type PresentationOption = 'badge' | 'sound' | 'alert';\r\n\r\ndeclare module '@capacitor/cli' {\r\n  export interface PluginsConfig {\r\n    /**\r\n     * You can configure the way the push notifications are displayed when the app is in foreground.\r\n     */\r\n    PushNotifications?: {\r\n      /**\r\n       * This is an array of strings you can combine. Possible values in the array are:\r\n       *   - `badge`: badge count on the app icon is updated (default value)\r\n       *   - `sound`: the device will ring/vibrate when the push notification is received\r\n       *   - `alert`: the push notification is displayed in a native dialog\r\n       *\r\n       * An empty array can be provided if none of the options are desired.\r\n       *\r\n       * badge is only available for iOS.\r\n       *\r\n       * @since 1.0.0\r\n       * @example [\"badge\", \"sound\", \"alert\"]\r\n       */\r\n      presentationOptions: PresentationOption[];\r\n    };\r\n  }\r\n}\r\n\r\nexport interface PushNotificationsPlugin {\r\n  /**\r\n   * Register the app to receive push notifications.\r\n   *\r\n   * This method will trigger the `'registration'` event with the push token or\r\n   * `'registrationError'` if there was a problem. It does not prompt the user for\r\n   * notification permissions, use `requestPermissions()` first.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  register(): Promise<void>;\r\n\r\n  /**\r\n   * Get a list of notifications that are visible on the notifications screen.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  getDeliveredNotifications(): Promise<DeliveredNotifications>;\r\n\r\n  /**\r\n   * Remove the specified notifications from the notifications screen.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  removeDeliveredNotifications(\r\n    delivered: DeliveredNotifications,\r\n  ): Promise<void>;\r\n\r\n  /**\r\n   * Remove all the notifications from the notifications screen.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  removeAllDeliveredNotifications(): Promise<void>;\r\n\r\n  /**\r\n   * Create a notification channel.\r\n   *\r\n   * Only available on Android O or newer (SDK 26+).\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  createChannel(channel: Channel): Promise<void>;\r\n\r\n  /**\r\n   * Delete a notification channel.\r\n   *\r\n   * Only available on Android O or newer (SDK 26+).\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  deleteChannel(args: { id: string }): Promise<void>;\r\n\r\n  /**\r\n   * List the available notification channels.\r\n   *\r\n   * Only available on Android O or newer (SDK 26+).\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  listChannels(): Promise<ListChannelsResult>;\r\n\r\n  /**\r\n   * Check permission to receive push notifications.\r\n   *\r\n   * On Android the status is always granted because you can always\r\n   * receive push notifications. If you need to check if the user allows\r\n   * to display notifications, use local-notifications plugin.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  checkPermissions(): Promise<PermissionStatus>;\r\n\r\n  /**\r\n   * Request permission to receive push notifications.\r\n   *\r\n   * On Android it doesn't prompt for permission because you can always\r\n   * receive push notifications.\r\n   *\r\n   * On iOS, the first time you use the function, it will prompt the user\r\n   * for push notification permission and return granted or denied based\r\n   * on the user selection. On following calls it will get the current status of\r\n   * the permission without prompting again.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  requestPermissions(): Promise<PermissionStatus>;\r\n\r\n  /**\r\n   * Called when the push notification registration finishes without problems.\r\n   *\r\n   * Provides the push notification token.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  addListener(\r\n    eventName: 'registration',\r\n    listenerFunc: (token: Token) => void,\r\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\r\n\r\n  /**\r\n   * Called when the push notification registration finished with problems.\r\n   *\r\n   * Provides an error with the registration problem.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  addListener(\r\n    eventName: 'registrationError',\r\n    listenerFunc: (error: RegistrationError) => void,\r\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\r\n\r\n  /**\r\n   * Called when the device receives a push notification.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  addListener(\r\n    eventName: 'pushNotificationReceived',\r\n    listenerFunc: (notification: PushNotificationSchema) => void,\r\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\r\n\r\n  /**\r\n   * Called when an action is performed on a push notification.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  addListener(\r\n    eventName: 'pushNotificationActionPerformed',\r\n    listenerFunc: (notification: ActionPerformed) => void,\r\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\r\n\r\n  /**\r\n   * Remove all native listeners for this plugin.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  removeAllListeners(): Promise<void>;\r\n}\r\n\r\nexport interface PushNotificationSchema {\r\n  /**\r\n   * The notification title.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  title?: string;\r\n\r\n  /**\r\n   * The notification subtitle.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  subtitle?: string;\r\n\r\n  /**\r\n   * The main text payload for the notification.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  body?: string;\r\n\r\n  /**\r\n   * The notification identifier.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * The notification tag.\r\n   *\r\n   * Only available on Android (from push notifications).\r\n   *\r\n   * @since 4.0.0\r\n   */\r\n  tag?: string;\r\n\r\n  /**\r\n   * The number to display for the app icon badge.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  badge?: number;\r\n\r\n  /**\r\n   * It's not being returned.\r\n   *\r\n   * @deprecated will be removed in next major version.\r\n   * @since 1.0.0\r\n   */\r\n  notification?: any;\r\n\r\n  /**\r\n   * Any additional data that was included in the\r\n   * push notification payload.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  data: any;\r\n\r\n  /**\r\n   * The action to be performed on the user opening the notification.\r\n   *\r\n   * Only available on Android.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  click_action?: string;\r\n\r\n  /**\r\n   * Deep link from the notification.\r\n   *\r\n   * Only available on Android.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  link?: string;\r\n\r\n  /**\r\n   * Set the group identifier for notification grouping.\r\n   *\r\n   * Only available on Android. Works like `threadIdentifier` on iOS.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  group?: string;\r\n\r\n  /**\r\n   * Designate this notification as the summary for an associated `group`.\r\n   *\r\n   * Only available on Android.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  groupSummary?: boolean;\r\n}\r\n\r\nexport interface ActionPerformed {\r\n  /**\r\n   * The action performed on the notification.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  actionId: string;\r\n\r\n  /**\r\n   * Text entered on the notification action.\r\n   *\r\n   * Only available on iOS.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  inputValue?: string;\r\n\r\n  /**\r\n   * The notification in which the action was performed.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  notification: PushNotificationSchema;\r\n}\r\n\r\nexport interface Token {\r\n  /**\r\n   * On iOS it contains the APNS token.\r\n   * On Android it contains the FCM token.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  value: string;\r\n}\r\n\r\nexport interface RegistrationError {\r\n  /**\r\n   * Error message describing the registration failure.\r\n   *\r\n   * @since 4.0.0\r\n   */\r\n  error: string;\r\n}\r\n\r\nexport interface DeliveredNotifications {\r\n  /**\r\n   * List of notifications that are visible on the\r\n   * notifications screen.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  notifications: PushNotificationSchema[];\r\n}\r\n\r\nexport interface Channel {\r\n  /**\r\n   * The channel identifier.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * The human-friendly name of this channel (presented to the user).\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * The description of this channel (presented to the user).\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  description?: string;\r\n\r\n  /**\r\n   * The sound that should be played for notifications posted to this channel.\r\n   *\r\n   * Notification channels with an importance of at least `3` should have a\r\n   * sound.\r\n   *\r\n   * The file name of a sound file should be specified relative to the android\r\n   * app `res/raw` directory.\r\n   *\r\n   * @since 1.0.0\r\n   * @example \"jingle.wav\"\r\n   */\r\n  sound?: string;\r\n\r\n  /**\r\n   * The level of interruption for notifications posted to this channel.\r\n   *\r\n   * @default `3`\r\n   * @since 1.0.0\r\n   */\r\n  importance?: Importance;\r\n\r\n  /**\r\n   * The visibility of notifications posted to this channel.\r\n   *\r\n   * This setting is for whether notifications posted to this channel appear on\r\n   * the lockscreen or not, and if so, whether they appear in a redacted form.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  visibility?: Visibility;\r\n\r\n  /**\r\n   * Whether notifications posted to this channel should display notification\r\n   * lights, on devices that support it.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  lights?: boolean;\r\n\r\n  /**\r\n   * The light color for notifications posted to this channel.\r\n   *\r\n   * Only supported if lights are enabled on this channel and the device\r\n   * supports it.\r\n   *\r\n   * Supported color formats are `#RRGGBB` and `#RRGGBBAA`.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  lightColor?: string;\r\n\r\n  /**\r\n   * Whether notifications posted to this channel should vibrate.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  vibration?: boolean;\r\n}\r\n\r\n/**\r\n * The importance level. For more details, see the [Android Developer Docs](https://developer.android.com/reference/android/app/NotificationManager#IMPORTANCE_DEFAULT)\r\n * @since 1.0.0\r\n */\r\nexport type Importance = 1 | 2 | 3 | 4 | 5;\r\n\r\n/**\r\n * The notification visibility. For more details, see the [Android Developer Docs](https://developer.android.com/reference/androidx/core/app/NotificationCompat#VISIBILITY_PRIVATE)\r\n * @since 1.0.0\r\n */\r\nexport type Visibility = -1 | 0 | 1;\r\n\r\nexport interface ListChannelsResult {\r\n  /**\r\n   * List of all the Channels created by your app.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  channels: Channel[];\r\n}\r\n\r\nexport interface PermissionStatus {\r\n  /**\r\n   * Permission state of receiving notifications.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  receive: PermissionState;\r\n}\r\n\r\n/**\r\n * @deprecated Use 'Channel`.\r\n * @since 1.0.0\r\n */\r\nexport type NotificationChannel = Channel;\r\n\r\n/**\r\n * @deprecated Use `ListChannelsResult`.\r\n * @since 1.0.0\r\n */\r\nexport type NotificationChannelList = ListChannelsResult;\r\n\r\n/**\r\n * @deprecated Use `PushNotificationSchema`.\r\n * @since 1.0.0\r\n */\r\nexport type PushNotification = PushNotificationSchema;\r\n\r\n/**\r\n * @deprecated Use `ActionPerformed`.\r\n * @since 1.0.0\r\n */\r\nexport type PushNotificationActionPerformed = ActionPerformed;\r\n\r\n/**\r\n * @deprecated Use `DeliveredNotifications`.\r\n * @since 1.0.0\r\n */\r\nexport type PushNotificationDeliveredList = DeliveredNotifications;\r\n\r\n/**\r\n * @deprecated Use `Token`.\r\n * @since 1.0.0\r\n */\r\nexport type PushNotificationToken = Token;\r\n"]}